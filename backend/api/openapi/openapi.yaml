openapi: 3.0.3
info:
  title: Angidi E-Commerce API
  version: 0.2.0
  description: |
    RESTful API for the Angidi e-commerce platform. Provides endpoints for user authentication,
    product management, and more.
    
    ## Authentication
    Most endpoints require authentication using JWT tokens. Include the access token in the
    Authorization header as: `Authorization: ******`
    
    ## Error Handling
    All errors follow a consistent format with appropriate HTTP status codes.
  contact:
    name: API Support
    url: https://github.com/yesoreyeram/angidi-demo-app
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT

servers:
  - url: http://localhost:8080
    description: Local development server
  - url: http://localhost:8080/api/v1
    description: API v1 base URL

tags:
  - name: Health
    description: Health check endpoints
  - name: Authentication
    description: User authentication and registration
  - name: Users
    description: User profile management
  - name: Products
    description: Product catalog management

paths:
  /health:
    get:
      tags:
        - Health
      summary: Health check
      description: Returns the health status of the API
      operationId: healthCheck
      responses:
        '200':
          description: Service is healthy
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      status:
                        type: string
                        example: healthy
                      timestamp:
                        type: string
                        format: date-time

  /api/v1/users/register:
    post:
      tags:
        - Authentication
      summary: Register a new user
      description: Creates a new user account with email and password
      operationId: registerUser
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterRequest'
      responses:
        '201':
          description: User successfully registered
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/User'
        '400':
          $ref: '#/components/responses/ValidationError'
        '409':
          $ref: '#/components/responses/ConflictError'
        '500':
          $ref: '#/components/responses/InternalError'

  /api/v1/users/login:
    post:
      tags:
        - Authentication
      summary: Login user
      description: Authenticates a user and returns JWT tokens
      operationId: loginUser
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      responses:
        '200':
          description: Successfully authenticated
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/AuthResponse'
        '400':
          $ref: '#/components/responses/ValidationError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '500':
          $ref: '#/components/responses/InternalError'

  /api/v1/users/refresh-token:
    post:
      tags:
        - Authentication
      summary: Refresh access token
      description: Generates new access and refresh tokens using a valid refresh token
      operationId: refreshToken
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RefreshTokenRequest'
      responses:
        '200':
          description: Tokens successfully refreshed
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/AuthResponse'
        '400':
          $ref: '#/components/responses/ValidationError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '500':
          $ref: '#/components/responses/InternalError'

  /api/v1/users/me:
    get:
      tags:
        - Users
      summary: Get current user profile
      description: Returns the profile of the authenticated user
      operationId: getUserProfile
      security:
        - BearerAuth: []
      responses:
        '200':
          description: User profile retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/User'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '500':
          $ref: '#/components/responses/InternalError'
    
    put:
      tags:
        - Users
      summary: Update current user profile
      description: Updates the profile of the authenticated user
      operationId: updateUserProfile
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateProfileRequest'
      responses:
        '200':
          description: Profile updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/User'
        '400':
          $ref: '#/components/responses/ValidationError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '500':
          $ref: '#/components/responses/InternalError'

  /api/v1/products:
    get:
      tags:
        - Products
      summary: List products
      description: Returns a paginated list of products with optional filters
      operationId: listProducts
      parameters:
        - name: page
          in: query
          description: Page number (default: 1)
          schema:
            type: integer
            minimum: 1
            default: 1
        - name: page_size
          in: query
          description: Number of items per page (default: 10, max: 100)
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 10
        - name: category_id
          in: query
          description: Filter by category ID
          schema:
            type: string
        - name: search
          in: query
          description: Search in product name and description
          schema:
            type: string
        - name: min_price
          in: query
          description: Minimum price filter
          schema:
            type: number
            format: double
            minimum: 0
        - name: max_price
          in: query
          description: Maximum price filter
          schema:
            type: number
            format: double
            minimum: 0
      responses:
        '200':
          description: Products retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/ProductList'
        '500':
          $ref: '#/components/responses/InternalError'
    
    post:
      tags:
        - Products
      summary: Create product (Admin only)
      description: Creates a new product in the catalog
      operationId: createProduct
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateProductRequest'
      responses:
        '201':
          description: Product created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Product'
        '400':
          $ref: '#/components/responses/ValidationError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '500':
          $ref: '#/components/responses/InternalError'

  /api/v1/products/{id}:
    get:
      tags:
        - Products
      summary: Get product by ID
      description: Returns a single product by its ID
      operationId: getProduct
      parameters:
        - name: id
          in: path
          required: true
          description: Product ID
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Product retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Product'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '500':
          $ref: '#/components/responses/InternalError'
    
    put:
      tags:
        - Products
      summary: Update product (Admin only)
      description: Updates an existing product
      operationId: updateProduct
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: Product ID
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateProductRequest'
      responses:
        '200':
          description: Product updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Product'
        '400':
          $ref: '#/components/responses/ValidationError'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '500':
          $ref: '#/components/responses/InternalError'
    
    delete:
      tags:
        - Products
      summary: Delete product (Admin only)
      description: Deletes a product from the catalog
      operationId: deleteProduct
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: Product ID
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: Product deleted successfully
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '500':
          $ref: '#/components/responses/InternalError'

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: JWT access token obtained from login or refresh endpoints

  schemas:
    User:
      type: object
      properties:
        id:
          type: string
          format: uuid
          description: Unique user identifier
        email:
          type: string
          format: email
          description: User email address
        name:
          type: string
          description: User's full name
        role:
          type: string
          enum: [user, admin]
          description: User role
        created_at:
          type: string
          format: date-time
          description: Account creation timestamp
        updated_at:
          type: string
          format: date-time
          description: Last update timestamp
      required:
        - id
        - email
        - name
        - role
        - created_at
        - updated_at

    RegisterRequest:
      type: object
      properties:
        email:
          type: string
          format: email
          maxLength: 255
          description: User email address
          example: user@example.com
        password:
          type: string
          format: password
          minLength: 8
          maxLength: 128
          description: User password (min 8 characters)
          example: SecurePass123!
        name:
          type: string
          minLength: 2
          maxLength: 100
          description: User's full name
          example: John Doe
      required:
        - email
        - password
        - name

    LoginRequest:
      type: object
      properties:
        email:
          type: string
          format: email
          description: User email address
          example: user@example.com
        password:
          type: string
          format: password
          description: User password
          example: SecurePass123!
      required:
        - email
        - password

    RefreshTokenRequest:
      type: object
      properties:
        refresh_token:
          type: string
          description: Valid refresh token
      required:
        - refresh_token

    UpdateProfileRequest:
      type: object
      properties:
        name:
          type: string
          minLength: 2
          maxLength: 100
          description: User's full name
          example: John Updated
      required:
        - name

    AuthResponse:
      type: object
      properties:
        access_token:
          type: string
          description: JWT access token (valid for 15 minutes)
        refresh_token:
          type: string
          description: JWT refresh token (valid for 7 days)
        expires_in:
          type: integer
          description: Access token expiration time in seconds
          example: 900
        user:
          $ref: '#/components/schemas/User'
      required:
        - access_token
        - refresh_token
        - expires_in
        - user

    Product:
      type: object
      properties:
        id:
          type: string
          format: uuid
          description: Unique product identifier
        name:
          type: string
          description: Product name
        description:
          type: string
          description: Product description
        price:
          type: number
          format: double
          minimum: 0
          description: Product price
        stock:
          type: integer
          minimum: 0
          description: Available stock quantity
        category_id:
          type: string
          description: Category identifier
        image_url:
          type: string
          format: uri
          description: Product image URL
        created_at:
          type: string
          format: date-time
          description: Product creation timestamp
        updated_at:
          type: string
          format: date-time
          description: Last update timestamp
      required:
        - id
        - name
        - price
        - stock
        - category_id
        - created_at
        - updated_at

    CreateProductRequest:
      type: object
      properties:
        name:
          type: string
          minLength: 3
          maxLength: 255
          description: Product name
          example: Amazing Product
        description:
          type: string
          maxLength: 2000
          description: Product description
          example: This is an amazing product
        price:
          type: number
          format: double
          minimum: 0.01
          description: Product price
          example: 99.99
        stock:
          type: integer
          minimum: 0
          description: Initial stock quantity
          example: 100
        category_id:
          type: string
          description: Category identifier
          example: electronics
        image_url:
          type: string
          format: uri
          description: Product image URL
          example: https://example.com/image.jpg
      required:
        - name
        - price
        - stock
        - category_id

    UpdateProductRequest:
      type: object
      properties:
        name:
          type: string
          minLength: 3
          maxLength: 255
          description: Product name
        description:
          type: string
          maxLength: 2000
          description: Product description
        price:
          type: number
          format: double
          minimum: 0.01
          description: Product price
        stock:
          type: integer
          minimum: 0
          description: Stock quantity
        category_id:
          type: string
          description: Category identifier
        image_url:
          type: string
          format: uri
          description: Product image URL

    ProductList:
      type: object
      properties:
        products:
          type: array
          items:
            $ref: '#/components/schemas/Product'
        total_count:
          type: integer
          description: Total number of products matching filters
        page:
          type: integer
          description: Current page number
        page_size:
          type: integer
          description: Number of items per page
        total_pages:
          type: integer
          description: Total number of pages
      required:
        - products
        - total_count
        - page
        - page_size
        - total_pages

    Error:
      type: object
      properties:
        error:
          type: object
          properties:
            code:
              type: string
              description: Error code
              example: VALIDATION_ERROR
            message:
              type: string
              description: Human-readable error message
              example: Invalid request parameters
            details:
              type: array
              items:
                $ref: '#/components/schemas/ValidationError'
            request_id:
              type: string
              description: Request identifier for debugging
      required:
        - error

    ValidationError:
      type: object
      properties:
        field:
          type: string
          description: Field name that failed validation
          example: email
        message:
          type: string
          description: Validation error message
          example: Email format is invalid
      required:
        - field
        - message

  responses:
    ValidationError:
      description: Request validation failed
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            error:
              code: VALIDATION_ERROR
              message: Invalid request parameters
              details:
                - field: email
                  message: Email format is invalid
              request_id: req-uuid-123

    UnauthorizedError:
      description: Authentication required or invalid credentials
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            error:
              code: INVALID_CREDENTIALS
              message: Invalid email or password
              request_id: req-uuid-123

    ForbiddenError:
      description: Insufficient permissions
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            error:
              code: FORBIDDEN
              message: Insufficient permissions
              request_id: req-uuid-123

    NotFoundError:
      description: Resource not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            error:
              code: USER_NOT_FOUND
              message: User not found
              request_id: req-uuid-123

    ConflictError:
      description: Resource already exists
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            error:
              code: EMAIL_EXISTS
              message: Email already registered
              request_id: req-uuid-123

    InternalError:
      description: Internal server error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            error:
              code: INTERNAL_ERROR
              message: Internal server error
              request_id: req-uuid-123
